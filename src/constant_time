# Valgrind suppression file for SNOVA
#
# Usage example:
#
# make clean all P="-DVALGRIND -g"
# valgrind --max-stackframe=6000000 --suppressions=constant_time -s --gen-suppressions=all --log-file=memcheck.log build/speed


# Rejection sampling

# Odd q

{
   Rejection sampling of secret key
   Memcheck:Value8
   src:snova_opt_q.c:417
}

{
   Rejection sampling of secret key
   Memcheck:Cond
   src:snova_opt_q.c:410
}

{
   Rejection sampling when no valid solution was found, Odd q
   Memcheck:Cond
   src:snova_opt_q.c:1012
}

{
   Rejection sampling when no valid solution was found, Odd q
   Memcheck:Cond
   src:snova_opt_q.c:1063
}

# q=16

{
   Rejection sampling when no valid solution was found, Optimized q=16
   Memcheck:Cond
   src:snova_opt_16.c:982
}

{
   Rejection sampling when no valid solution was found, Optimized q=16
   Memcheck:Cond
   src:snova_opt_16.c:1014
}

# AVX2, odd q

{
   Rejection sampling of secret key
   Memcheck:Value8
   src:snova_avx2_q.c:424
}

{
   Rejection sampling of secret key
   Memcheck:Cond
   src:snova_avx2_q.c:417
}

{
   Rejection sampling when no valid solution was found, Odd q
   Memcheck:Cond
   src:snova_avx2_q.c:1087
}

{
   Rejection sampling when no valid solution was found, Odd q
   Memcheck:Cond
   src:snova_avx2_q.c:1138
}

# AVX2, q=16

{
   Rejection sampling when no valid solution was found
   Memcheck:Cond
   src:snova_avx2_16l2.c:1534
}

{
   Lookup depending on public information
   Memcheck:Value8
   ...
   fun:calc_LR_J_vtl
}

{
   Lookup depending on public information
   Memcheck:Value8
   ...
   fun:sign_digest_core_gnl_vtl
}

# Only dependent on Public key

{
   ABQ expansion, used only for A and B
   Memcheck:Cond
   fun:be_invertible_by_add_aS
}

{
   Public ABQ expansion
   Memcheck:Value8
   ...
   fun:gen_ABQ
}

{
   Public ABQ expansion
   Memcheck:Cond
   ...
   fun:gen_ABQ
}

# Verification functions
{
   Public function pk_expand
   Memcheck:Value8
   ...
   fun:_snova_*pk_expand
}

{
   Public function pk_expand
   Memcheck:Cond
   ...
   fun:_snova_*pk_expand
}

{
   Public function verify
   Memcheck:Cond
   fun:_snova_*verify
}

# q=16, l=2

{
   Public function verify
   Memcheck:Value8
   ...
   fun:verify_signture_pkx_vtl
}

{
   Public function verify
   Memcheck:Cond
   ...
   fun:verify_signture_pkx_vtl
}

{
   Public function verify
   Memcheck:Value8
   ...
   fun:verify_signture_vtl_core
}

{
   Public function verify
   Memcheck:Cond
   ...
   fun:verify_signture_vtl_core
}

# Test tools

{
   Condition depends on the function return value
   Memcheck:Cond
   src:sign.c:53
}

{
   Verify function
   Memcheck:Cond
   fun:crypto_sign_open
}

{
   Print public KAT file
   Memcheck:Value8
   ...
   fun:fprintBstr
}

{
   Test tool
   Memcheck:Cond
   fun:main
}

{
   Print public KAT file
   Memcheck:Cond
   ...
   fun:fprintBstr
}

{
   Check the public KAT result
   Memcheck:Cond
   src:PQCgenKAT_sign.c:139
}
